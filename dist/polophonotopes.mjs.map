{"version":3,"file":"polophonotopes.mjs","sources":["../node_modules/graph-hops/dist/graph-hops.mjs","../index.js"],"sourcesContent":["var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/** Calculator for finding widest and/or shortest paths in a graph using the Floyed-Warshall algorithm. */\n\nvar FloydWarshall = function () {\n\n  /**\n   * Create a Floyd-Warshall calculator for a specific adjacency matrix.\n   * @param {number[][]} adjacencyMatrix - A square matrix representing a graph with weighted edges.\n   */\n  function FloydWarshall(adjacencyMatrix) {\n    classCallCheck(this, FloydWarshall);\n\n    this.adjacencyMatrix = adjacencyMatrix;\n  }\n\n  /**\n   * Calculates the widest distance from one node to the other.\n   * @return {number[][]} - Matrix with distances from a node to the other\n   */\n\n\n  createClass(FloydWarshall, [{\n    key: '_initializeDistanceMatrix',\n\n\n    /**\n     * @private\n     */\n    value: function _initializeDistanceMatrix(blankFiller) {\n      var distMatrix = [];\n      for (var i = 0; i < this.order; ++i) {\n        distMatrix[i] = [];\n        for (var j = 0; j < this.order; ++j) {\n          if (i === j) {\n            distMatrix[i][j] = 0;\n          } else {\n            var val = this.adjacencyMatrix[i][j];\n            if (val) {\n              distMatrix[i][j] = val;\n            } else {\n              distMatrix[i][j] = blankFiller;\n            }\n          }\n        }\n      }\n      return distMatrix;\n    }\n  }, {\n    key: 'widestPaths',\n    get: function get$$1() {\n      var distMatrix = this._initializeDistanceMatrix(0);\n      for (var k = 0; k < this.order; ++k) {\n        for (var i = 0; i < this.order; ++i) {\n          if (i === k) {\n            continue;\n          }\n          for (var j = 0; j < this.order; ++j) {\n            if (j === i || j === k) {\n              continue;\n            }\n            var direct = distMatrix[i][j];\n            var detour = Math.min(distMatrix[i][k], distMatrix[k][j]);\n            if (detour > direct) {\n              distMatrix[i][j] = detour;\n            }\n          }\n        }\n      }\n      return distMatrix;\n    }\n\n    /**\n     * Calculates the shortest paths of the weighted graph.\n     * (The output will not be accurate if the graph has a negative cycle.)\n     * @return {number[][]} - Matrix with distances from a node to the other\n     */\n\n  }, {\n    key: 'shortestPaths',\n    get: function get$$1() {\n      var distMatrix = this._initializeDistanceMatrix(Infinity);\n\n      for (var k = 0; k < this.order; ++k) {\n        for (var i = 0; i < this.order; ++i) {\n          for (var j = 0; j < this.order; ++j) {\n            var dist = distMatrix[i][k] + distMatrix[k][j];\n            if (distMatrix[i][j] > dist) {\n              distMatrix[i][j] = dist;\n            }\n          }\n        }\n      }\n\n      for (var _i = 0; _i < this.order; ++_i) {\n        for (var _j = 0; _j < this.order; ++_j) {\n          if (distMatrix[_i][_j] === Infinity) {\n            distMatrix[_i][_j] = -1;\n          }\n        }\n      }\n\n      return distMatrix;\n    }\n\n    /**\n     * Get the order of the adjacency matrix (and of the output distance matrices.)\n     * @return {integer} The order of the adjacency matrix.\n     */\n\n  }, {\n    key: 'order',\n    get: function get$$1() {\n      return this.adjacencyMatrix.length;\n    }\n  }]);\n  return FloydWarshall;\n}();\n\nvar index = FloydWarshall;\n\nfunction unweightedAdjacencyMatrix(nodes, edges, id) {\n  if (!id) {\n    id = function id(obj) {\n      return obj;\n    };\n  }\n  if (nodes.length < 2) {\n    return [];\n  }\n  var adj = [];\n  for (var i = 0; i < nodes.length; i++) {\n    adj[i] = new Array(nodes.length);\n  }\n\n  edges.forEach(function (edge) {\n    adj[nodes.indexOf(nodes.find(function (o) {\n      return id(o) == edge.source;\n    }))][nodes.indexOf(nodes.find(function (o) {\n      return id(o) == edge.target;\n    }))] = 1;\n  });\n  return adj;\n}\n\nfunction graphHops(nodes, edges, id, proto) {\n  var adj = unweightedAdjacencyMatrix(nodes, edges, id);\n  var hopMatrix = new index(adj).shortestPaths;\n  var hops = { 1: edges };\n  hopMatrix.forEach(function (row, i) {\n    row.forEach(function (hop, j) {\n      if (hop > 1) {\n        if (!hops[hop]) {\n          hops[hop] = [];\n        }\n        var h = {};\n        if (proto) proto(h);\n        h.source = nodes[i];h.target = nodes[j];\n        hops[hop].push(h);\n      }\n    });\n  });\n  return hops;\n}\n\nexport { unweightedAdjacencyMatrix, graphHops };\n//# sourceMappingURL=graph-hops.mjs.map\n","import ghops from 'graph-hops'\nconst Bitset = require('fast-bitset')\nconst minrepr = require('min-repr')\n\nexport function accidentals(size) {\n    let acc = new Bitset(size)\n    acc.set(0)\n    acc.set(1)\n    \n    let accidentals = []\n    for (let i=0; i<size; i++) {\n        accidentals.push(acc)\n        acc = acc.circularShift(1)\n    }\n\n    return accidentals;\n}\n\nexport function fromIndices(size,indices) {\n    let bs = new Bitset(size)\n    indices.forEach((x)=>{bs.set(x)})\n    return bs\n}\n\nexport function intervals(bs){\n    let r = []\n    let indices = bs.getIndices()\n    let size = indices.length\n    for(let i=0; i<size; i++){\n        r.push(indices[(i+1)%size] + (i+1 >= size ? bs.MAX_BIT+1 : 0) - indices[i])\n    }\n    return r;\n}\n\nexport function info(bs){\n    let sh = shape(bs,True)\n    sh['chroma'] = bs.getIndices()\n    return sh\n}\n\nexport function shape(bs,info=false){\n    let intershape = intervals(bs)\n    let shift = minrepr(intershape)\n    let size = intershape.length\n    let shape = []\n    for(let i=shift; i<size+shift; i++){\n        shape.push(intershape[i%size])\n    }\n    shape = String(shape)\n    if(info){\n        return {intervals: intershape, shape: shape, offset: shift}\n    } else {\n        return shape\n    }\n}\n\n\nexport function findShapes(shapes,visit){\n    if(shapes.constructor === Bitset){shapes = [shapes]}\n    if(visit && visit.constructor === Bitset){visit = [visit]}\n    let size = shapes[0].MAX_BIT+1\n    visit = visit ? visit : shapes\n    shapes = shapes.map((s) => shape(s))\n    let lookingFor = (g) => shapes.includes(shape(g))\n    return explore(visit,lookingFor)\n}\n\nexport function explore(visit,lookingFor){\n    lookingFor = lookingFor ? lookingFor : (g)=>true\n    if(visit && visit.constructor === Bitset){visit = [visit]}\n    let size = visit[0].MAX_BIT+1\n\n    let visited = []\n    let edges = []\n    let nodes = []\n\n    let Acc = accidentals(size)\n    while(visit.length > 0) {\n        let start = visit.pop()\n        if (visited.includes(start.dehydrate())) { continue }\n        visited.push(start.dehydrate())\n        nodes.push(start)\n        let goto = Acc.map((a)=>start.xor(a))\n        for(let g of goto){\n            if(lookingFor(g)){\n                edges.push({source: start, target: g})\n            if(!visited.includes(g.dehydrate())){\n                visit.push(g)\n            }\n            }\n        }\n    }\n    return {nodes: nodes, edges: edges}\n}\n\n"],"names":["classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","FloydWarshall","adjacencyMatrix","_initializeDistanceMatrix","blankFiller","distMatrix","order","j","val","get$$1","k","direct","detour","Math","min","Infinity","dist","_i","_j","Bitset","require","minrepr","accidentals","size","acc","set","push","circularShift","fromIndices","indices","bs","forEach","x","intervals","r","getIndices","MAX_BIT","info","sh","shape","True","intershape","shift","String","offset","findShapes","shapes","visit","constructor","map","s","lookingFor","g","includes","explore","visited","edges","nodes","Acc","start","pop","dehydrate","goto","a","xor","source"],"mappings":"AAAA,IAAIA,iBAAiB,SAAjBA,cAAiB,CAAUC,QAAV,EAAoBC,WAApB,EAAiC;MAChD,EAAED,oBAAoBC,WAAtB,CAAJ,EAAwC;UAChC,IAAIC,SAAJ,CAAc,mCAAd,CAAN;;CAFJ;;AAMA,IAAIC,cAAc,YAAY;WACnBC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyC;SAClC,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAME,MAA1B,EAAkCD,GAAlC,EAAuC;UACjCE,aAAaH,MAAMC,CAAN,CAAjB;iBACWG,UAAX,GAAwBD,WAAWC,UAAX,IAAyB,KAAjD;iBACWC,YAAX,GAA0B,IAA1B;UACI,WAAWF,UAAf,EAA2BA,WAAWG,QAAX,GAAsB,IAAtB;aACpBC,cAAP,CAAsBR,MAAtB,EAA8BI,WAAWK,GAAzC,EAA8CL,UAA9C;;;;SAIG,UAAUR,WAAV,EAAuBc,UAAvB,EAAmCC,WAAnC,EAAgD;QACjDD,UAAJ,EAAgBX,iBAAiBH,YAAYgB,SAA7B,EAAwCF,UAAxC;QACZC,WAAJ,EAAiBZ,iBAAiBH,WAAjB,EAA8Be,WAA9B;WACVf,WAAP;GAHF;CAXgB,EAAlB;;;;AAoBA,IAAIiB,gBAAgB,YAAY;;;;;;WAMrBA,aAAT,CAAuBC,eAAvB,EAAwC;mBACvB,IAAf,EAAqBD,aAArB;;SAEKC,eAAL,GAAuBA,eAAvB;;;;;;;;cASUD,aAAZ,EAA2B,CAAC;SACrB,2BADqB;;;;;WAOnB,SAASE,yBAAT,CAAmCC,WAAnC,EAAgD;UACjDC,aAAa,EAAjB;WACK,IAAIf,IAAI,CAAb,EAAgBA,IAAI,KAAKgB,KAAzB,EAAgC,EAAEhB,CAAlC,EAAqC;mBACxBA,CAAX,IAAgB,EAAhB;aACK,IAAIiB,IAAI,CAAb,EAAgBA,IAAI,KAAKD,KAAzB,EAAgC,EAAEC,CAAlC,EAAqC;cAC/BjB,MAAMiB,CAAV,EAAa;uBACAjB,CAAX,EAAciB,CAAd,IAAmB,CAAnB;WADF,MAEO;gBACDC,MAAM,KAAKN,eAAL,CAAqBZ,CAArB,EAAwBiB,CAAxB,CAAV;gBACIC,GAAJ,EAAS;yBACIlB,CAAX,EAAciB,CAAd,IAAmBC,GAAnB;aADF,MAEO;yBACMlB,CAAX,EAAciB,CAAd,IAAmBH,WAAnB;;;;;aAKDC,UAAP;;GAxBuB,EA0BxB;SACI,aADJ;SAEI,SAASI,MAAT,GAAkB;UACjBJ,aAAa,KAAKF,yBAAL,CAA+B,CAA/B,CAAjB;WACK,IAAIO,IAAI,CAAb,EAAgBA,IAAI,KAAKJ,KAAzB,EAAgC,EAAEI,CAAlC,EAAqC;aAC9B,IAAIpB,IAAI,CAAb,EAAgBA,IAAI,KAAKgB,KAAzB,EAAgC,EAAEhB,CAAlC,EAAqC;cAC/BA,MAAMoB,CAAV,EAAa;;;eAGR,IAAIH,IAAI,CAAb,EAAgBA,IAAI,KAAKD,KAAzB,EAAgC,EAAEC,CAAlC,EAAqC;gBAC/BA,MAAMjB,CAAN,IAAWiB,MAAMG,CAArB,EAAwB;;;gBAGpBC,SAASN,WAAWf,CAAX,EAAciB,CAAd,CAAb;gBACIK,SAASC,KAAKC,GAAL,CAAST,WAAWf,CAAX,EAAcoB,CAAd,CAAT,EAA2BL,WAAWK,CAAX,EAAcH,CAAd,CAA3B,CAAb;gBACIK,SAASD,MAAb,EAAqB;yBACRrB,CAAX,EAAciB,CAAd,IAAmBK,MAAnB;;;;;aAKDP,UAAP;;;;;;;;;GA/CuB,EAwDxB;SACI,eADJ;SAEI,SAASI,MAAT,GAAkB;UACjBJ,aAAa,KAAKF,yBAAL,CAA+BY,QAA/B,CAAjB;;WAEK,IAAIL,IAAI,CAAb,EAAgBA,IAAI,KAAKJ,KAAzB,EAAgC,EAAEI,CAAlC,EAAqC;aAC9B,IAAIpB,IAAI,CAAb,EAAgBA,IAAI,KAAKgB,KAAzB,EAAgC,EAAEhB,CAAlC,EAAqC;eAC9B,IAAIiB,IAAI,CAAb,EAAgBA,IAAI,KAAKD,KAAzB,EAAgC,EAAEC,CAAlC,EAAqC;gBAC/BS,OAAOX,WAAWf,CAAX,EAAcoB,CAAd,IAAmBL,WAAWK,CAAX,EAAcH,CAAd,CAA9B;gBACIF,WAAWf,CAAX,EAAciB,CAAd,IAAmBS,IAAvB,EAA6B;yBAChB1B,CAAX,EAAciB,CAAd,IAAmBS,IAAnB;;;;;;WAMH,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKX,KAA3B,EAAkC,EAAEW,EAApC,EAAwC;aACjC,IAAIC,KAAK,CAAd,EAAiBA,KAAK,KAAKZ,KAA3B,EAAkC,EAAEY,EAApC,EAAwC;cAClCb,WAAWY,EAAX,EAAeC,EAAf,MAAuBH,QAA3B,EAAqC;uBACxBE,EAAX,EAAeC,EAAf,IAAqB,CAAC,CAAtB;;;;;aAKCb,UAAP;;;;;;;;GAhFuB,EAwFxB;SACI,OADJ;SAEI,SAASI,MAAT,GAAkB;aACd,KAAKP,eAAL,CAAqBX,MAA5B;;GA3FuB,CAA3B;SA8FOU,aAAP;CAhHkB,EAApB;;ACzBA,IAAMkB,SAASC,QAAQ,aAAR,CAAf;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;;AAEA,AAAO,SAASE,WAAT,CAAqBC,IAArB,EAA2B;QAC1BC,MAAM,IAAIL,MAAJ,CAAWI,IAAX,CAAV;QACIE,GAAJ,CAAQ,CAAR;QACIA,GAAJ,CAAQ,CAAR;;QAEIH,cAAc,EAAlB;SACK,IAAIhC,IAAE,CAAX,EAAcA,IAAEiC,IAAhB,EAAsBjC,GAAtB,EAA2B;oBACXoC,IAAZ,CAAiBF,GAAjB;cACMA,IAAIG,aAAJ,CAAkB,CAAlB,CAAN;;;WAGGL,WAAP;;;AAGJ,AAAO,SAASM,WAAT,CAAqBL,IAArB,EAA0BM,OAA1B,EAAmC;QAClCC,KAAK,IAAIX,MAAJ,CAAWI,IAAX,CAAT;YACQQ,OAAR,CAAgB,UAACC,CAAD,EAAK;WAAIP,GAAH,CAAOO,CAAP;KAAtB;WACOF,EAAP;;;AAGJ,AAAO,SAASG,SAAT,CAAmBH,EAAnB,EAAsB;QACrBI,IAAI,EAAR;QACIL,UAAUC,GAAGK,UAAH,EAAd;QACIZ,OAAOM,QAAQtC,MAAnB;SACI,IAAID,IAAE,CAAV,EAAaA,IAAEiC,IAAf,EAAqBjC,GAArB,EAAyB;UACnBoC,IAAF,CAAOG,QAAQ,CAACvC,IAAE,CAAH,IAAMiC,IAAd,KAAuBjC,IAAE,CAAF,IAAOiC,IAAP,GAAcO,GAAGM,OAAH,GAAW,CAAzB,GAA6B,CAApD,IAAyDP,QAAQvC,CAAR,CAAhE;;WAEG4C,CAAP;;;AAGJ,AAAO,SAASG,IAAT,CAAcP,EAAd,EAAiB;QAChBQ,KAAKC,MAAMT,EAAN,EAASU,IAAT,CAAT;OACG,QAAH,IAAeV,GAAGK,UAAH,EAAf;WACOG,EAAP;;;AAGJ,AAAO,SAASC,KAAT,CAAeT,EAAf,EAA6B;QAAXO,IAAW,uEAAN,KAAM;;QAC5BI,aAAaR,UAAUH,EAAV,CAAjB;QACIY,QAAQrB,QAAQoB,UAAR,CAAZ;QACIlB,OAAOkB,WAAWlD,MAAtB;QACIgD,QAAQ,EAAZ;SACI,IAAIjD,IAAEoD,KAAV,EAAiBpD,IAAEiC,OAAKmB,KAAxB,EAA+BpD,GAA/B,EAAmC;cACzBoC,IAAN,CAAWe,WAAWnD,IAAEiC,IAAb,CAAX;;YAEIoB,OAAOJ,KAAP,CAAR;QACGF,IAAH,EAAQ;eACG,EAACJ,WAAWQ,UAAZ,EAAwBF,OAAOA,KAA/B,EAAsCK,QAAQF,KAA9C,EAAP;KADJ,MAEO;eACIH,KAAP;;;;AAKR,AAAO,SAASM,UAAT,CAAoBC,MAApB,EAA2BC,KAA3B,EAAiC;QACjCD,OAAOE,WAAP,KAAuB7B,MAA1B,EAAiC;iBAAU,CAAC2B,MAAD,CAAT;;QAC/BC,SAASA,MAAMC,WAAN,KAAsB7B,MAAlC,EAAyC;gBAAS,CAAC4B,KAAD,CAAR;;YAElCA,QAAQA,KAAR,GAAgBD,MAAxB;aACSA,OAAOG,GAAP,CAAW,UAACC,CAAD;eAAOX,MAAMW,CAAN,CAAP;KAAX,CAAT;QACIC,aAAa,SAAbA,UAAa,CAACC,CAAD;eAAON,OAAOO,QAAP,CAAgBd,MAAMa,CAAN,CAAhB,CAAP;KAAjB;WACOE,QAAQP,KAAR,EAAcI,UAAd,CAAP;;;AAGJ,AAAO,SAASG,OAAT,CAAiBP,KAAjB,EAAuBI,UAAvB,EAAkC;iBACxBA,aAAaA,UAAb,GAA0B,UAACC,CAAD;eAAK,IAAL;KAAvC;QACGL,SAASA,MAAMC,WAAN,KAAsB7B,MAAlC,EAAyC;gBAAS,CAAC4B,KAAD,CAAR;;QACtCxB,OAAOwB,MAAM,CAAN,EAASX,OAAT,GAAiB,CAA5B;;QAEImB,UAAU,EAAd;QACIC,QAAQ,EAAZ;QACIC,QAAQ,EAAZ;;QAEIC,MAAMpC,YAAYC,IAAZ,CAAV;;;YAEQoC,QAAQZ,MAAMa,GAAN,EAAZ;YACIL,QAAQF,QAAR,CAAiBM,MAAME,SAAN,EAAjB,CAAJ,EAAyC;;;gBACjCnC,IAAR,CAAaiC,MAAME,SAAN,EAAb;cACMnC,IAAN,CAAWiC,KAAX;YACIG,OAAOJ,IAAIT,GAAJ,CAAQ,UAACc,CAAD;mBAAKJ,MAAMK,GAAN,CAAUD,CAAV,CAAL;SAAR,CAAX;;;;;;iCACaD,IAAb,8HAAkB;oBAAVV,CAAU;;oBACXD,WAAWC,CAAX,CAAH,EAAiB;0BACP1B,IAAN,CAAW,EAACuC,QAAQN,KAAT,EAAgBvE,QAAQgE,CAAxB,EAAX;wBACD,CAACG,QAAQF,QAAR,CAAiBD,EAAES,SAAF,EAAjB,CAAJ,EAAoC;8BAC1BnC,IAAN,CAAW0B,CAAX;;;;;;;;;;;;;;;;;;;;WAVNL,MAAMxD,MAAN,GAAe,CAArB,EAAwB;;;iCAEuB;;WAaxC,EAACkE,OAAOA,KAAR,EAAeD,OAAOA,KAAtB,EAAP;;;;;"}